(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{574:function(t,a,s){"use strict";s.r(a);var n=s(25),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"엔티티-매핑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#엔티티-매핑"}},[t._v("#")]),t._v(" 엔티티 매핑")]),t._v(" "),s("p",[t._v("jpa를 사용하는 데 가장 중요한 것은 엔티티와 테이블을 정확히 매핑하는 것이다. 따라서 매핑 어노테이션을 숙지하고 올바르게 사용해야한다.")]),t._v(" "),s("ul",[s("li",[t._v("객체와 테이블 매핑 → @Entity, @Table")]),t._v(" "),s("li",[t._v("기본 키 매핑 → @Id")]),t._v(" "),s("li",[t._v("필드와 컬럼 매핑 → @Column")]),t._v(" "),s("li",[t._v("연관관계 매핑 → @ManyToOne, @JoinColumn")])]),t._v(" "),s("aside",[t._v("\n💡 어노테이션이 아니라 xml로 매핑 정보를 사용하는 방법도 있다고 한다.\n")]),t._v(" "),s("h1",{attrs:{id:"entity"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#entity"}},[t._v("#")]),t._v(" @Entity")]),t._v(" "),s("p",[t._v("jpa를 사용해서 테이블과 매핑할 클래스는 필수로 사용해야하는 어노테이션.")]),t._v(" "),s("p",[t._v("옵션으로 name이 있다. 설정하지 않는다면 기본값(클래스 명)을 사용한다.")]),t._v(" "),s("ul",[s("li",[t._v("주의사항\n"),s("ul",[s("li",[t._v("기본 생성자는 필수다.")]),t._v(" "),s("li",[t._v("final 클래스, enum, interface, inner 클래스에는 사용할 수 없다.")]),t._v(" "),s("li",[t._v("저장할 필드에 final을 사용하면 안된다.")])])])]),t._v(" "),s("p",[t._v("jpa가 엔티티를 생성할 때 기본 생성자를 사용한다. 자바는 생성자 선언이 없으면 기본 생성자를 만들어 준다.")]),t._v(" "),s("h1",{attrs:{id:"table"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#table"}},[t._v("#")]),t._v(" @Table")]),t._v(" "),s("p",[t._v("엔티티와 매핑할 테이블을 지정한다. 생략하면 매핑한 엔티티 이름을 테이블 이름으로 사용한다.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("속성")]),t._v(" "),s("th",[t._v("기능")]),t._v(" "),s("th",[t._v("기본값")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("name")]),t._v(" "),s("td",[t._v("매핑할 테이블 이름")]),t._v(" "),s("td",[t._v("엔티티 이름을 사용한다")])]),t._v(" "),s("tr",[s("td",[t._v("catalog")]),t._v(" "),s("td",[t._v("catalog기능이 있는 DB에서 catalog를 매핑한다.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("schema")]),t._v(" "),s("td",[t._v("schema기능이 있는 DB에서 schema를 매핑한다.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("uniqueConstraints(DDL)")]),t._v(" "),s("td",[t._v("DDL 생성 시에 유니크 제약 조건을 만든다. 2개 이상의 복합 유니크 제약 조건도 만들 수 있다. 참고로 이 기능은 스키마 자동 생성 기능을 사용해서 DDL을 만들 때만 사용된다.")]),t._v(" "),s("td")])])]),t._v(" "),s("h1",{attrs:{id:"다양한-매핑-사용"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#다양한-매핑-사용"}},[t._v("#")]),t._v(" 다양한 매핑 사용")]),t._v(" "),s("p",[t._v("enum")]),t._v(" "),s("ul",[s("li",[t._v("@Enumerated를 사용하여 속성값을 매핑한다.")])]),t._v(" "),s("p",[t._v("temporal")]),t._v(" "),s("ul",[s("li",[t._v("자바의 날짜 타입은 @Temporal을 사용하여 매핑한다.")])]),t._v(" "),s("p",[t._v("description")]),t._v(" "),s("ul",[s("li",[t._v("설명하는 필드는 길이 제한이 없다. 따라서 VARCHAR 타입이 아닌 CLOB 타입으로 지정해야한다. jpa에서는 @Lob으로 매핑할 수 있다.(CLOB, BLOB)")])]),t._v(" "),s("h1",{attrs:{id:"db-스키마-자동-생성"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#db-스키마-자동-생성"}},[t._v("#")]),t._v(" DB 스키마 자동 생성")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("jpa:\n\thibernate:\n\t  ddl-auto: create or create-drop or update or validate or none\n")])])]),s("p",[t._v("자동 생성되는 스키마는 DB 방언에 따라 DDL 문이 달라진다.")]),t._v(" "),s("p",[t._v("ex. varchar or varchar2")]),t._v(" "),s("aside",[t._v("\n💡 jpa 2.1부터 validate와 update는 지원하지 않는다.\n")]),t._v(" "),s("aside",[t._v("\n💡 자바는 카멜케이스 DB는 스네이크 케이스를 사용하는데 옵션으로 ejb.naming.strategy를 사용하면 자동으로 매핑을 해준다. 이 경우에는 수동으로 엔티티에 테이블 명이나 컬럼 명을 생략하면 자동으로 카멜, 스네이크로 매핑해준다.\n")]),t._v(" "),s("h2",{attrs:{id:"🚫-주의-사항"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#🚫-주의-사항"}},[t._v("#")]),t._v(" 🚫 주의 사항")]),t._v(" "),s("ul",[s("li",[t._v("운영서버에서 DDL 수정이 가능한 옵션은 절대 사용하면 안된다. (create, create-drop, update)")]),t._v(" "),s("li",[t._v("오직 개발 서버에서만 사용해야한다.")]),t._v(" "),s("li",[t._v("개발환경에 따른 추천 전략은 다음과 같다.\n"),s("ul",[s("li",[t._v("개발 초기 단계는 create, update")]),t._v(" "),s("li",[t._v("초기화 상태로 자동화된 테스트를 진행하는 개발자 환경과 CI서버는 create, create-drop")]),t._v(" "),s("li",[t._v("테스트 서버는 update, validate")]),t._v(" "),s("li",[t._v("스테이징과 운영서버는 validate, none")])])])]),t._v(" "),s("h1",{attrs:{id:"ddl-생성기능"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ddl-생성기능"}},[t._v("#")]),t._v(" DDL 생성기능")]),t._v(" "),s("p",[t._v("회원 이름은 필수 , 10자 초과 x 라는 조건이 있을 때 스키마 자동 생성을 사용하여 어떻게 만들까? 아래와 같이 필드에 설정해주면 된다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Table")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MEMBER"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Member")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ID"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NAME"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("이번에는 유니크 제약 조건을 만들어주는 @Table의 uniqueConstraints 속성을 알아보자.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Table")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MEMBER"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" uniqueConstraints "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@UniqueContraint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(' " NAME_AGE_UNIQUE'),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tcolumnNames "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NAME"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AGE"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Member")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ID"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"NAME"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nullable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v("\t"),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h1",{attrs:{id:"기본키-매핑"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#기본키-매핑"}},[t._v("#")]),t._v(" 기본키 매핑")]),t._v(" "),s("p",[t._v("앞서 봤듯이 "),s("code",[t._v("@Id")]),t._v("를 사용하여 기본 키를 할당했는데 만약 DB에서 생성해주는 값을 사용하려면 어떻게 매핑하여야할까? 오라클의 시퀸스 오브젝트 또는 Mysql의 AUTO_INCREMENT 같은 기능을 사용해서 생성된 값을 사용하고 싶다면? jpa에서는 다음과 같이 해결하였다.")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("직접 할당 - 기본 키를 애플리케이션에서 직접 할당한다.")])]),t._v(" "),s("li",[s("p",[t._v("자동 생성 - 대리 키 사용방식, @GeneratedValue를 사용하여 적용한다.")]),t._v(" "),s("ul",[s("li",[t._v("IDENTITY: 기본 키 생성을 DB에 위임한다.")]),t._v(" "),s("li",[t._v("SEQUENCE: DB 시퀸스를 사용해서 기본키를 할당한다.")]),t._v(" "),s("li",[t._v("TABLE: 키 생성 테이블을 사용한다.")])]),t._v(" "),s("h2",{attrs:{id:"기본-키-직접-할당-전략"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#기본-키-직접-할당-전략"}},[t._v("#")]),t._v(" 기본 키 직접 할당 전략")]),t._v(" "),s("p",[t._v("@Id를 사용하여 매핑하면 된다. 가능한 자바 타입은 아래와 같다.")]),t._v(" "),s("ul",[s("li",[t._v("자바 기본형")]),t._v(" "),s("li",[t._v("자바 wrapper형")]),t._v(" "),s("li",[t._v("String")]),t._v(" "),s("li",[t._v("java.util.date")]),t._v(" "),s("li",[t._v("java.sql.date")]),t._v(" "),s("li",[t._v("java.math.BigDecimal")]),t._v(" "),s("li",[t._v("jaba.math.BigInteger")])]),t._v(" "),s("p",[t._v("직접 할당 전략은 "),s("code",[t._v("em.persist()")]),t._v("로 저장하기 전에 애플리케이션에서 기본 키를 직접 할당하는 방법이다. (ex. member.setId(”member1”));")]),t._v(" "),s("h2",{attrs:{id:"⭐identity-전략"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐identity-전략"}},[t._v("#")]),t._v(" ⭐IDENTITY 전략")]),t._v(" "),s("p",[t._v("기본 키 생성을 DB에 위임하는 전략이다. 주로 MySQL, PostgreSQL, Server, DB2에서 사용한다.")]),t._v(" "),s("p",[t._v("@GeneratedValue (strategy = GenerationType.IDENTITY)를 기본 키에 적용하면 되는데 이 옵션은 이미 DB에 값이 생성되어있어야한다. (값을 구할 수 있을 때 사용 가능)")]),t._v(" "),s("p",[t._v("이 전략은 insert 한 후에 기본 키값을 조회할 수 있기 때문에 엔티티에 식별자 값을 할당하려면 jpa는 추가적으로 DB에서 조회를 해야한다. JDBC3에 추가된Statement.getGeneratedKeys()를 사용하면 데이터를 저장하면서 동시에 생성된 기본 키값을 얻어올 수 있어 하이버네이트는 이 메서드를 사용한다.")]),t._v(" "),s("p",[t._v("🚫  주의사항")]),t._v(" "),s("p",[t._v("엔티티가 영속 상태가 되려면 식별자가 반드시 필요한데 이 전략은 결국에 엔티티를 DB에 저장해야 식별자를 구할 수 있으므로 em.persist()를 호출하는 즉시 InsertSQL이 DB에 저장된다. 그러므로 이 전략은 쓰기 지연이 동작하지 않는다.")]),t._v(" "),s("h2",{attrs:{id:"⭐sequence-전략"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐sequence-전략"}},[t._v("#")]),t._v(" ⭐SEQUENCE 전략")]),t._v(" "),s("p",[t._v("유일한 값을 순서대로 생성하는 특별한 DB 오브젝트이다. 오라클, PostgreSQL, DB2, H2에서 사용 가능하다. 사용법은 아래와 같다.")]),t._v(" "),s("ol",[s("li",[t._v("시퀸스를 생성해준다.")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" BOARD "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tID "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BIGINT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DATA")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 시퀸스 생성")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" SEQUENCE BOARD_SEQ "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WITH")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" INCREMENT "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",[s("li",[t._v("시퀸스를 매핑해준다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SequenceGenerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOARD_SEQ_GENERATOR"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tsequenceName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOARD_SEQ"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 매핑할 DB 시퀸스 이름")]),t._v("\n\t\tinitialValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allocationSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 시퀸스 등록")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Board")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GeneratedValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strategy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenerationType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SEQUENCE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tgenerator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOARD_SEQ_GENERATOR"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 등록한 시퀸스 생성기를 선택.")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("이렇게 등록된 시퀸스(식별자 값)는 em.persist()를 호출할 때 먼저 DB 시퀸스를 사용해서 식별자를 조회한다.")]),t._v(" "),s("li",[t._v("그런 다음 조회한 식별자 값을 엔티티 id에 할당한 후에 엔티티를 영속성 컨텍스트에 저장한다.")]),t._v(" "),s("li",[t._v("이후 커밋 → 플러시 과정을 거쳐 DB에 저장하게 된다.")])]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("속성")]),t._v(" "),s("th",[t._v("기능")]),t._v(" "),s("th",[t._v("기본값")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("name")]),t._v(" "),s("td",[t._v("식별자 생성기 이름")]),t._v(" "),s("td",[t._v("필수")])]),t._v(" "),s("tr",[s("td",[t._v("sequenceName")]),t._v(" "),s("td",[t._v("DB에 등록되어 있는 시퀸스 이름")]),t._v(" "),s("td",[t._v("hibernate_sequence")])]),t._v(" "),s("tr",[s("td",[t._v("initialValue")]),t._v(" "),s("td",[t._v("DDL 생성 시에만 사용됨. 시퀸스 DDL을 생성할 때 처음 시작하는 수를 지정한다.")]),t._v(" "),s("td",[t._v("1")])]),t._v(" "),s("tr",[s("td",[t._v("allocationSize")]),t._v(" "),s("td",[t._v("시퀸스 한번 호출에 증가하는 수 (성능 최적화에 사용됨)")]),t._v(" "),s("td",[t._v("50")])]),t._v(" "),s("tr",[s("td",[t._v("catalog. schema")]),t._v(" "),s("td",[t._v("DB catalog, schema 이름")]),t._v(" "),s("td")])])]),t._v(" "),s("aside",[t._v("\n  💡 여기서 allocationSize가 50인 이유는 시퀸스를 여러번 호출하지 않기 위해서 이다. 시퀸스를 한번 호출 했을 때 시퀸스를 한번에 50을 증가 시켜 놓은 후 1~50까지를 메모리에 저장하고 그 값을 식별자로 사용한다. \n"),s("p",[t._v("만약 insert성능에 신경을 쓰지 않아도 되면 size를 1로 줄여도 무방하다.")])]),t._v(" "),s("h3",{attrs:{id:"⭐table-전략"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐table-전략"}},[t._v("#")]),t._v(" ⭐TABLE 전략")]),t._v(" "),s("p",[t._v("이 전략은 키 생성 전용 테이블을 하나 만들고 여기에 이름과 값으로 사용할 컬럼을 만들어 시퀸스를 흉내내는 전략이다. 그러므로 모든 DB에서 사용가능하다.")]),t._v(" "),s("ol",[s("li",[t._v("먼저 테이블을 생성한다.")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" MY_SEQUENCES "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tSEQUNECE_NAME "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VARCHAR")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\tNEXT_VAL "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("BIGINT")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" SEQUENCE_NAME"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("SEQUNECE_NAME 컬럼을 시퀸스 이름으로 사용하고 next_val 컬럼을 시퀸스 값으로 사용한다. 컬럼의 이름은 변경 가능하다.")]),t._v(" "),s("ol",[s("li",[t._v("JPA")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@TableGenerator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n\t\tname "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOARD_SEQ_GENERATOR"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\ttable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"MY_SEQUENCES"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 매핑할 DB 테이블 이름")]),t._v("\n\t\tpkColumnValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOARD_SEQ"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" allocationSize "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Board")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@GeneratedValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("strategy "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GenerationType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TABLE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t\t\t\tgenerator "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"BOARD_SEQ_GENERATOR"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 등록한 시퀸스 생성기를 선택.")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Long")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("table",[s("thead",[s("tr",[s("th",[t._v("속성")]),t._v(" "),s("th",[t._v("기능")]),t._v(" "),s("th",[t._v("기본값")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("name")]),t._v(" "),s("td",[t._v("식별자 생성기 이름")]),t._v(" "),s("td",[t._v("필수")])]),t._v(" "),s("tr",[s("td",[t._v("table")]),t._v(" "),s("td",[t._v("키 생성 테이블명")]),t._v(" "),s("td",[t._v("hibernate_sequence")])]),t._v(" "),s("tr",[s("td",[t._v("pkColumnName")]),t._v(" "),s("td",[t._v("시퀸스 컬럼명")]),t._v(" "),s("td",[t._v("sequence_name")])]),t._v(" "),s("tr",[s("td",[t._v("valueColumnName")]),t._v(" "),s("td",[t._v("시퀸스 값 컬럼명")]),t._v(" "),s("td",[t._v("next_val")])]),t._v(" "),s("tr",[s("td",[t._v("pkColumnValue")]),t._v(" "),s("td",[t._v("키로 사용할 값 이름")]),t._v(" "),s("td",[t._v("엔티티 이름")])]),t._v(" "),s("tr",[s("td",[t._v("initialValue")]),t._v(" "),s("td",[t._v("초기 값 마지막으로 생성된 값이 기준이다.")]),t._v(" "),s("td",[t._v("0")])]),t._v(" "),s("tr",[s("td",[t._v("allocationSize")]),t._v(" "),s("td",[t._v("시퀸스 한 번 호출에 증가하는 수 (성능 최적화에 사용됨)")]),t._v(" "),s("td",[t._v("50")])]),t._v(" "),s("tr",[s("td",[t._v("catalog, schema")]),t._v(" "),s("td",[t._v("DB catalog, schema 이름")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("uniqueConstraints")]),t._v(" "),s("td",[t._v("유니크 제약 조건을 지정할 수 있다.")]),t._v(" "),s("td")])])]),t._v(" "),s("aside",[t._v("\n  💡 JPA 표준 명세서에는 table, pkColumnName, valueColumnName의 기본값은 JPA 구현체가 정의하도록 했다.\n  ")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("{ pklColumnMame }")]),t._v(" "),s("th",[t._v("{ valueColumnName }")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("{ pkColumnValue }")]),t._v(" "),s("td",[t._v("{ initialValue }")])])])]),t._v(" "),s("h3",{attrs:{id:"⭐-auto-전략"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-auto-전략"}},[t._v("#")]),t._v(" ⭐ AUTO 전략")]),t._v(" "),s("p",[t._v("GenerationType.AUTO는 선택한 DB 방언에 따라 자동으로 세가지 전략 중 하나를 선택한다. 장점이라면 DB를 변경해도 코드의 수정이 불필요한 점이있다. 개발 초기 단계에서 보통 사용한다. 그럼 시퀸스나 테이블 전략이 자동으로 선택 됐을때 해당 시퀸스 테이블은 생성을 해야하는가? → 자동으로 JPA가 테이블을 만들어 줄 것이다.")]),t._v(" "),s("h3",{attrs:{id:"기본-키-매핑-정리"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#기본-키-매핑-정리"}},[t._v("#")]),t._v(" 기본 키 매핑 정리")]),t._v(" "),s("p",[t._v("영속성 컨텍스트는 식별자 값으로 엔티티를 구분하므로 영속상태로 만들기 위해서는 식별자 값이 필수이다. em.persist()를 호출한 직후에 발생하는 일을 식별자 할당 전략으로 정리하면 다음과 같다.")]),t._v(" "),s("ul",[s("li",[t._v("직접 할당 em.persist()를 호출하기 전에 애플리케이션에서 직접 식별자 값을 할당해야한다. 만약 없다면 예외가 발생한다.")]),t._v(" "),s("li",[t._v("SEQUENCE : DB 시퀸스에서 식별자 값을 획득한 후 영속성 컨텍스트에 저장한다")]),t._v(" "),s("li",[t._v("TABLE : DB 시퀸스 생성용 테이블에서 식별자 값을 구한 후 영속성 컨텍스트에 저장한다.")]),t._v(" "),s("li",[t._v("IDENTITY : DB에 엔티티를 저장해서 식별자 값을 구한 후 영속성 컨텍스트에 저장한다.\n"),s("ul",[s("li",[t._v("이 전략을 테이블에 데이터를 저장해야 식별자 값을 얻을 수 있다.")])])])]),t._v(" "),s("h1",{attrs:{id:"_4-7-필드와-컬럼-매핑-레퍼런스"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-7-필드와-컬럼-매핑-레퍼런스"}},[t._v("#")]),t._v(" 4.7 필드와 컬럼 매핑: 레퍼런스")]),t._v(" "),s("p",[t._v("아래는 jpa가 제공하는 필드와 컬럼 매핑용 어노테이션이다.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("분류")]),t._v(" "),s("th",[t._v("어노테이션")]),t._v(" "),s("th",[t._v("설명")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("필드와 컬럼 매핑")]),t._v(" "),s("td",[t._v("@Column")]),t._v(" "),s("td",[t._v("컬럼을 매핑한다.")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("@Enumerated")]),t._v(" "),s("td",[t._v("자바의 Enum 타입을 매핑한다.")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("@Temporal")]),t._v(" "),s("td",[t._v("날짜 타입을 매핑한다.")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("@Lob")]),t._v(" "),s("td",[t._v("BLOB, CLOB 타입을 매핑한다.")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td",[t._v("@Transient")]),t._v(" "),s("td",[t._v("특정 필드를 DB에 매핑하지 않는다.")])]),t._v(" "),s("tr",[s("td",[t._v("기타")]),t._v(" "),s("td",[t._v("@Access")]),t._v(" "),s("td",[t._v("JPA가 엔티티에 접근하는 방식을 지정한다.")])]),t._v(" "),s("tr",[s("td"),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("h2",{attrs:{id:"⭐-column"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-column"}},[t._v("#")]),t._v(" ⭐ @Column")]),t._v(" "),s("p",[t._v("@Column은 객체 필드를 테이블 컬럼에 매핑한다. 가장 많이 사용되고 기능도 많다. 속성 중에 name, nullable이 제일 많이 사용된다.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("속성")]),t._v(" "),s("th",[t._v("기능")]),t._v(" "),s("th",[t._v("기본값")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("name")]),t._v(" "),s("td",[t._v("필드와 매핑할 테이블의 컬럼 이름")]),t._v(" "),s("td",[t._v("객체의 필드 이름")])]),t._v(" "),s("tr",[s("td",[t._v("insertable")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("( 거의 사용되지 않음 )")]),t._v(" "),s("td",[t._v("엔티티 저장 시 이 필드도 같이 저장한다. false로 설정하면 이 필드는 DB에 저장하지 않는다. false옵션은 읽기 전용일 때 사용한다.")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("updatable")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("(거의 사용되지 않음 )")]),t._v(" "),s("td",[t._v("엔티티 저장 시 이 필드도 같이 수정한다. false로 설정하면 이 필드는 DB에 수정하지 않는다. false옵션은 읽기 전용일 때 사용한다.")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("table")]),t._v(" "),s("td"),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("( 거의 사용되지 않음 )")]),t._v(" "),s("td",[t._v("하나의 엔티티를 두 개 이상의 테이블에 매핑할 때 사용한다. 지정한 필드를 다른 테이블에 매핑할 수 있다.")]),t._v(" "),s("td",[t._v("현재 클래스가 매핑 된 테이블")])]),t._v(" "),s("tr",[s("td",[t._v("nullable ( DDL )")]),t._v(" "),s("td",[t._v("null 값의 허용 여부를 설정한다. false로 설정하면 DDL 생성 시에 not null 제약 조건이 붙는다.")]),t._v(" "),s("td",[t._v("true")])]),t._v(" "),s("tr",[s("td",[t._v("unique ( DDL )")]),t._v(" "),s("td",[t._v("@Table의 uniqueConstraints와 같지만 한 컬럼에 간단히 유니크 제약 조건을 걸 때 사용한다. 만약 두 컬럼 이상을 사용해서 유니크 제약 조건을 사용하려면 클래스 레벨에서 @Table.uniqueConstraints를 사용해야한다.")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("columnDefinition ( DDL )")]),t._v(" "),s("td",[t._v("DB 컬럼 정보를 직접 줄 수 있다.")]),t._v(" "),s("td",[t._v("필드의 자바 타입과 방언 정보를 사용해서 적절한 컬럼 타입을 생성한다.")])]),t._v(" "),s("tr",[s("td",[t._v("length ( DDL )")]),t._v(" "),s("td",[t._v("문자 길이 제약 조건. String 타입에만 사용한다.")]),t._v(" "),s("td",[t._v("255")])]),t._v(" "),s("tr",[s("td",[t._v("precision, scale ( DDL )")]),t._v(" "),s("td",[t._v("BigDecimal 타입에서 사용한다. ( BigIneger에서도 사용 가능함. ) precision은 소수점을 포함한 전체 자릿수를, scale은 소수의 자릿수다. 참고로 double, float 타입에는 적용되지 않는다. 아주 큰 숫자나 정밀한 소수를 다루어야 할 때만 사용한다.")]),t._v(" "),s("td",[t._v("precision = 19,")])]),t._v(" "),s("tr",[s("td",[t._v("scale = 2")]),t._v(" "),s("td"),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("DDL 생성 속성에 따라 어떤 DDL이 생성되는지 확인해보자.")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("nullable(DDL 생성 기능)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nullable "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 생성된 DDL")]),t._v("\ndata "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("255")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" not "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("unique(DDL 생성 기능)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("unique "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 생성된 DDL")]),t._v("\nalter table "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Tablename")]),t._v("\n\tadd constraint "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("UK_Xxx")]),t._v(" unique "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("username"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("columnDefinition(DDL 생성 기능)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("columnDefinition "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("\"varchar(100) default 'EMPTY'\"")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 생성된 DDL")]),t._v("\ndata "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'EMPTY'")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("lengh(DDL 생성 기능)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 생성된 DDL")]),t._v("\ndata "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("varchar")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])]),t._v(" "),s("li",[s("p",[t._v("precision, scale(DDL 생성 기능)")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("precision "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" scale "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BigDecimal")]),t._v(" cal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 생성된 DDL")]),t._v("\ncal "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("numeric")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//H2, PostgreSQL")]),t._v("\ncal "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//Oracle")]),t._v("\ncal "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("decimal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MySQL")]),t._v("\n")])])])])]),t._v(" "),s("aside",[t._v("\n  💡 @Column 생략\n  대부분의 기본값이 적용되는데 자바 기본 타입일 때는 nullable 속성에 예외가 있다. \n"),s("p",[t._v("int data1; //@Column 생략, 자바 기본타입\ndata1 integer not null // 생성된 DDL")]),t._v(" "),s("p",[t._v("Integer data2 //@Column 생략, 객체 타입\ndata2 integer // 생성된 DDL")]),t._v(" "),s("p",[t._v("@Column\nint data3; // @Column 사용, 자바 기본 타입\ndata3 integer // 생성된 DDL")]),t._v(" "),s("p",[t._v("그래서 자바 기본 타입에 @Column를 사용하게 되면 nullabla = false를 걸어두는 것이 안전하다.")])]),t._v(" "),s("h2",{attrs:{id:"⭐-enumerated"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-enumerated"}},[t._v("#")]),t._v(" ⭐@Enumerated")]),t._v(" "),s("p",[t._v("자바의 enum 타입을 매핑할 때 사용한다.")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("속성")]),t._v(" "),s("th",[t._v("기능")]),t._v(" "),s("th",[t._v("기본값")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("value")]),t._v(" "),s("td",[t._v("- EnumType.ORDINAL : enum 순서를 DB에 저장")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("- EnumType.STRING : enum 이름을 DB에 저장")]),t._v(" "),s("td",[t._v("EnumType.ORDINAL")]),t._v(" "),s("td")])])]),t._v(" "),s("p",[t._v("예를 들면")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// enum Class")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RoleType")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tADMIN"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" USER\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Entity Class")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Enumerated")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("EnumType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("STRING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RoleType")]),t._v(" roleType"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// enum 이름으로 매핑한다.")]),t._v("\n")])])]),s("ul",[s("li",[t._v("member.setRoleType(RoleType.ADMIN);\n"),s("ul",[s("li",[t._v("DB에 문자 "),s("code",[t._v("ADMIN")]),t._v("이 저장됨.")])])]),t._v(" "),s("li",[t._v("만약 타입이 ORDINAL이었다면 enum Class에 정의된 순서대로 1이 DB에 저장된다.")])]),t._v(" "),s("aside",[t._v("\n  💡 만약 enum 클래스에 수정이 있을 경우 ORDINAL로 설정된 상태라면 순서 값이 달라지기 때문에 타입을 STRING으로 사용하는 것을 권장한다. (단점은 저장 데이터 크기가 ORDINAL에 비해 크다는 단점이 있다.)\n  ")]),t._v(" "),s("h2",{attrs:{id:"⭐-temporal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-temporal"}},[t._v("#")]),t._v(" ⭐@Temporal")]),t._v(" "),s("p",[t._v("날짜 타입을 매핑할 떄 사용된다. ( java.util.date, java.util.Calendar )")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("속성")]),t._v(" "),s("th",[t._v("기능")]),t._v(" "),s("th",[t._v("기본값")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("value")]),t._v(" "),s("td",[t._v("- TemporalType.DATE : 날짜 , DB DATE 타입과 매핑 ( 예: 2022-05-11)")]),t._v(" "),s("td")])])]),t._v(" "),s("ul",[s("li",[t._v("TemporalType.TIME : 시간, DB time타입과 매핑 ( 예: 11:11:11)")]),t._v(" "),s("li",[t._v("Tempotal.Type.TIMESTAMP: 날짜와 시간, DB timestamp 타입과 매핑 ( 예: 2022-05-11 11:11:11) | 필수로 지정해 주어야 한다.  |")])]),t._v(" "),s("h2",{attrs:{id:"⭐-lob"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-lob"}},[t._v("#")]),t._v(" ⭐@Lob")]),t._v(" "),s("p",[t._v("DB BLOB, CLOB 타입과 매핑한다. 속성이 없는 대신에 필드 타입이 문자면 CLOB으로 매핑하고 나머지는 BLOB으로 매핑한다.")]),t._v(" "),s("ul",[s("li",[t._v("CLOB : String, char[], java.sql.CLOB")]),t._v(" "),s("li",[t._v("BLOB : byte[], java.sql.BLOB")])]),t._v(" "),s("h2",{attrs:{id:"⭐-transient"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-transient"}},[t._v("#")]),t._v(" ⭐@Transient")]),t._v(" "),s("p",[t._v("이 필드는 매핑하지 않는다. 따라서 DB에 저장하지 않고 조회하지도 않는다. 객체에 임시로 어떤 값을 보관하고 싶을 때 사용한다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transient")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" temp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"⭐-access"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#⭐-access"}},[t._v("#")]),t._v(" ⭐@Access")]),t._v(" "),s("p",[t._v("jpa가 엔티티 데이터에 접근하는 방식을 지정한다.")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("필드 접근 : AccessType.FIELD로 지정한다. 필드에 직접 접근하며 필드 접근 권한이 private여도 접근 할 수 있다.")]),t._v(" "),s("ul",[s("li",[t._v("@Access를 설정하지 않으면 @Id의 위치를 기준으로 접근 방식이 설정된다.")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("FIELD"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Member")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("@Id가 필드에 있으므로 AccessType.FIELD 타입으로 설정한 것과 같다.")]),t._v(" "),s("li",[t._v("따라서 @Access는 생략 가능하다.")])])]),t._v(" "),s("li",[s("p",[t._v("프로퍼티 접근 : AccessType.PROPERTY로 지정한다. 접근자(Getter)를 사용한다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PROPERTY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Member")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getId")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Column")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getData1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getData2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("@Id가 프로퍼티에 있으므로 AccessType.PROPERTY타입으로 설정한 것과 같다.")]),t._v(" "),s("li",[t._v("따라서 @Access는 생략 가능하다.")])])]),t._v(" "),s("li",[s("p",[t._v("아래와 같이 접근 방식으로 함께 사용할 수도 있다.")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Entity")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Member")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Id")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transient")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" firstName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Transient")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" lastName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Access")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AccessType")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("PROPERTY"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFullName")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" firstName "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" lastName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])])])])])}),[],!1,null,null,null);a.default=e.exports}}]);