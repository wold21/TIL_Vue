(window.webpackJsonp=window.webpackJsonp||[]).push([[81],{606:function(t,a,e){"use strict";e.r(a);var s=e(25),r=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"rest-api"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api"}},[t._v("#")]),t._v(" Rest API")]),t._v(" "),e("h2",{attrs:{id:"이제와서-rest-api를"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#이제와서-rest-api를"}},[t._v("#")]),t._v(" 이제와서 Rest API를?")]),t._v(" "),e("p",[t._v("백엔드 개발이든 프론트 개발이든 혹은 인프라를 포함에 많은 곳에서 Rest API를 사용하는 것 같다. 이전 회사에서도 수없이 사용했고 웹 개발자로 일하기 시작하면서 계속 곁에 두고 사용하고 있었는데 문서로 정리를 하지 않았고 여전히 내가 사용해보지 못한 메소드가 존재하기 때문에 지식 갱신을 위해 이렇게 정리하게 되었다.")]),t._v(" "),e("h2",{attrs:{id:"rest-api란"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api란"}},[t._v("#")]),t._v(" Rest API란?")]),t._v(" "),e("p",[t._v("Rest API에서 REST란 Representational State Transfer의 줄임말인데 특정 상태를 기준으로 통신하는 방법이라고 이해하면 될 것 같다. 이 API는 HTTP 표준 프로토콜을 사용하며 일반적으로 JSON을 주고 받기 때문에 현대 웹 개발에 많이 쓰이고 있는 점이 특징이다.")]),t._v(" "),e("blockquote",[e("p",[t._v("HTTP 표준 프로토콜? 프로토콜이라는 단어는 통신 규약 혹은 약속이라고 생각하면 되고 HTTP 프로토콜은 웹에서 클라이언트와 서버 간에 데이터 통신을 하기위한 규약이라고 정리할 수 있다.")])]),t._v(" "),e("h3",{attrs:{id:"rest-api의-호출-구조"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rest-api의-호출-구조"}},[t._v("#")]),t._v(" Rest API의 호출 구조")]),t._v(" "),e("ol",[e("li",[t._v("request\nAPI의 메서드를 뜻하며 대표적으로 GET, POST, PUT, PATCH, DELETE를 사용하며 부가적인 메서드로 HEAD, OPTIONS, CONNECT, TRACE가 존재한다. 특히 OPTIONS 같은 경우는 cors에서 쉽게 확인 해볼 수 있는데 리소스에 대한 통신 가능 여부를 위해 사용된다.")]),t._v(" "),e("li",[t._v("url\nAPI의 엔드 포인트를 뜻한다. 라이브러리마다 다를 것 같지만 클라이언트에서 호출할 시 프로토콜을 url에 명시하지 않으면 현재 접속한 주소 + 요청 url을 조합하여 호출하게 된다.")]),t._v(" "),e("li",[t._v("header\n토큰(인증)을 담거나 콘텐츠의 타입 등을 설정할 수 있으며 API 통신 시 중요한 부분에 해당한다.")]),t._v(" "),e("li",[t._v("data\n서버에 보내는 정보이며 Body라고 불리기도 한다. 메서드 중 GET 메서드는 Body를 사용하지 않는 특징이 있다.")])]),t._v(" "),e("h2",{attrs:{id:"메서드-별-특징"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#메서드-별-특징"}},[t._v("#")]),t._v(" 메서드 별 특징")]),t._v(" "),e("h3",{attrs:{id:"get"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" GET")]),t._v(" "),e("p",[t._v("조회라고 하는 요청을 할 때 주로 사용하며 요청할 때 필요한 정보는 쿼리 파라미터를 설정하여 호출하게 된다.")]),t._v(" "),e("blockquote",[e("p",[t._v("GET /workspace/private?username=seohae&id=351")])]),t._v(" "),e("p",[t._v("조회 시 특정 조건에 따라 POST를 사용할 수 있지만 GET 요청 자체는 브라우저에서 캐싱을 하기 때문에 특별한 일이 아니라면 조회 시 GET 메서드를 사용하면 된다.")]),t._v(" "),e("h3",{attrs:{id:"post"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" POST")]),t._v(" "),e("p",[t._v("새 데이터를 생성하는 요청을 하거나 서버에 데이터를 전달하기 위해서 사용하는 메서드로 요청 시 관련된 데이터는 Body에 JSON 형태로 만들어 요청하게 된다.")]),t._v(" "),e("h3",{attrs:{id:"put"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[t._v("#")]),t._v(" PUT")]),t._v(" "),e("p",[t._v("기존의 데이터를 수정 혹은 대체 할 때 요청하는 메서드이다. 호출 시 보통 변경되어야 할 대상의 고유 값을 쿼리 파라미터로 지정하거나 값이 여러개 혹은 주소에 드러나지 않게 할 경우 Body에 JSON 형태로 요청하면 된다. 특징으로는 변경될 데이터의 기존 데이터를 전체 덮어쓰기 한다는 특징이 있다.")]),t._v(" "),e("h3",{attrs:{id:"patch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#patch"}},[t._v("#")]),t._v(" PATCH")]),t._v(" "),e("p",[t._v("위에서 사용한 메서드는 전체 덮어쓰기만 하는데 부분만 업데이트 하기 위해서는 해당 메서드를 사용하면 된다. 이전 회사에서는 한번도 사용하지 않았는데 올바른 요청과 투명한 통신을 위해서는 사용하는 것이 맞다고 생각이 든다.")]),t._v(" "),e("h3",{attrs:{id:"delete"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" DELETE")]),t._v(" "),e("p",[t._v("말 그대로 데이터를 삭제하는 메서드이다.")]),t._v(" "),e("blockquote",[e("p",[t._v("DELETE /workspace/private?id=351")])]),t._v(" "),e("p",[t._v("이런식으로 간단하게 호출하는데 아직까지 이것보다 복잡하게 호출해 본적이 없다. 지금에와서 의문이 들지만 대량 삭제 시 id 값을 바꿔가며 매번 호출하는 방식이었는데 네트워크 트래픽 면에서 이게 맞는지 의문이 든다. 그렇다고 한번에 값을 넘겨서 삭제를 한다는 것은 삭제 시 어떤 데이터에서 오류가 날지 모르는 노릇인데 해당 오류를 어떻게 처리 할건지 이러한 부분들이 명확하지 않을 때는 n번 호출하는게 맞다고 생각이 든다.")])])}),[],!1,null,null,null);a.default=r.exports}}]);