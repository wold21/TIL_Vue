(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{436:function(t,a,e){t.exports=e.p+"assets/img/nf_1.4a54cc0a.png"},437:function(t,a,e){t.exports=e.p+"assets/img/nf_2.3612c877.png"},438:function(t,a,e){t.exports=e.p+"assets/img/nf_3.cc7e327a.png"},439:function(t,a,e){t.exports=e.p+"assets/img/nf_4.a735cb0e.png"},440:function(t,a,e){t.exports=e.p+"assets/img/nf_5.155d75f3.png"},441:function(t,a,e){t.exports=e.p+"assets/img/nf_6.1d94d955.png"},442:function(t,a,e){t.exports=e.p+"assets/img/nf_7.fe53fdda.png"},443:function(t,a,e){t.exports=e.p+"assets/img/nf_8.b1955ad8.png"},548:function(t,a,e){"use strict";e.r(a);var r=e(25),_=Object(r.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"정규화-1부"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#정규화-1부"}},[t._v("#")]),t._v(" 정규화 1부")]),t._v(" "),r("h2",{attrs:{id:"개요"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#개요"}},[t._v("#")]),t._v(" 개요")]),t._v(" "),r("p",[t._v("이번 글에서는 DB 정규화에 대해서 알아볼 예정이다. 이는 지난 시간에 학습한 FD를 기본 바탕으로 개념을 확장할 예정이다.")]),t._v(" "),r("h2",{attrs:{id:"db-정규화"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#db-정규화"}},[t._v("#")]),t._v(" DB 정규화")]),t._v(" "),r("p",[t._v("데이터 중복과 insertion, update, deletion anomaly를 최소화하기 위해 일련의 normal forms(NF)에 따라 relaional DB를 구성하는 과정이다.")]),t._v(" "),r("h3",{attrs:{id:"normal-forms"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#normal-forms"}},[t._v("#")]),t._v(" Normal forms")]),t._v(" "),r("p",[t._v("정규화 되기 위해 준수해야 하는 몇가지 rule을 말하며 1NF ~ 6NF까지 존재한다.\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(436),alt:"nf_1",height:"250"}})]),t._v(" "),r("h4",{attrs:{id:"_1nf-bcnf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1nf-bcnf"}},[t._v("#")]),t._v(" 1NF ~ BCNF")]),t._v(" "),r("ul",[r("li",[t._v("FD와 key만으로 정의되는 normal forms")]),t._v(" "),r("li",[t._v("3NF까지 도달하면 정규화 됐다고 말하기도 함")]),t._v(" "),r("li",[t._v("보통 실무에서 3NF 혹은 BCNF까지 진행한다. (많이 해도 4NF까지 라고 한다.)")])]),t._v(" "),r("h2",{attrs:{id:"정규화-진행"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#정규화-진행"}},[t._v("#")]),t._v(" 정규화 진행")]),t._v(" "),r("p",[t._v("정규화를 진행하기 전에 기준이 되는 테이블을 살펴보겠다.\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(437),alt:"nf_2",height:"100"}})]),t._v(" "),r("ul",[r("li",[t._v("임직원의 월급 계좌를 관리하는 테이블")]),t._v(" "),r("li",[t._v("월급 계좌는 국민은행이나 우리은행 중 하나")]),t._v(" "),r("li",[t._v("한 임직원이 하나 이상의 월급 계좌를 등록하고 월급 비율을 조정할 수 있다.")]),t._v(" "),r("li",[t._v("계좌마다 등급이 있다.\n"),r("ul",[r("li",[t._v("국민 : star -> prestige -> loyal")]),t._v(" "),r("li",[t._v("우리 : bronze -> silver -> gold")])])]),t._v(" "),r("li",[t._v("한 계좌는 하나 이상의 현금 카드와 연동될 수 있다.")])]),t._v(" "),r("h3",{attrs:{id:"key"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#key"}},[t._v("#")]),t._v(" Key")]),t._v(" "),r("h4",{attrs:{id:"super-key"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#super-key"}},[t._v("#")]),t._v(" super key")]),t._v(" "),r("p",[t._v("table에서 tuple들을 unique하게 식별할 수 있는 attributes set")]),t._v(" "),r("h4",{attrs:{id:"candidate-key"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#candidate-key"}},[t._v("#")]),t._v(" (candidate) key")]),t._v(" "),r("p",[t._v("어느 한 attribute라도 제거하면 unique하게 tuples를 식별할 수 없는 super key"),r("br"),t._v("\n이 테이블에서는 {account_id}, {bank_name, account_num}가 해당된다.")]),t._v(" "),r("h4",{attrs:{id:"primary-key"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#primary-key"}},[t._v("#")]),t._v(" primary key")]),t._v(" "),r("p",[t._v("table에서 tuple들을 unique하게 식별하려고 "),r("code",[t._v("선택된")]),t._v(" (candidate) key"),r("br"),t._v("\n이 테이블에서는 속성 수가 적은 {account_id}를 선택 함.")]),t._v(" "),r("h4",{attrs:{id:"prime-attribute"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#prime-attribute"}},[t._v("#")]),t._v(" prime attribute")]),t._v(" "),r("p",[t._v("임의의 key에 속하는 attribute를 의미하며 "),r("code",[t._v("account_id, bank_name, account_num")]),t._v("가 여기에 속하게 된다.")]),t._v(" "),r("h4",{attrs:{id:"non-prime-attribute"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#non-prime-attribute"}},[t._v("#")]),t._v(" non-prime attribute")]),t._v(" "),r("p",[t._v("어떠한 key에도 속하지 않는 attribute를 말하며 "),r("code",[t._v("class, raio, empl_id, empl_name, card_id")]),t._v("가 이에 속한다.")]),t._v(" "),r("h3",{attrs:{id:"functional-dependency"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#functional-dependency"}},[t._v("#")]),t._v(" Functional dependency")]),t._v(" "),r("p",[t._v("해당 테이블의 FD 구성은 다음과 같다\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(438),alt:"nf_3",height:"200"}})]),t._v(" "),r("ul",[r("li",[t._v("primary key로 지정한 account_id와 나머지 속성")]),t._v(" "),r("li",[t._v("bank_name과 account_num과 그 나머지 속성")]),t._v(" "),r("li",[t._v("empl_id와 empl_name")]),t._v(" "),r("li",[t._v("class와 bank_name\n"),r("ul",[r("li",[t._v("은행별 클래스 명이 모두 달랐고 각 은행 내에서도 중복되는 클래스 명이 없음.")]),t._v(" "),r("li",[t._v("그러므로 클래스로 은행명 구분이 가능하다.")])])])]),t._v(" "),r("h3",{attrs:{id:"_1nf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1nf"}},[t._v("#")]),t._v(" 1NF")]),t._v(" "),r("br"),t._v(" "),r("img",{attrs:{src:e(439),alt:"nf_4",height:"200"}}),t._v(" "),r("p",[t._v("1NF의 규칙은 "),r("code",[t._v("attribute의 value는 반드시 나눠질 수 없는 단일한 값이어야한다.")]),t._v(" 그러나 messi같은 경우 card_id를 두 개나 가지고 있다. 1NF만을 해결한다면 결과는 다음과 같다.\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(440),alt:"nf_5",height:"200"}})]),t._v(" "),r("p",[t._v("하지만 곧바로 문제를 발견하게 된다. 데이터의 중복도 있고 ratio의 값도 총 합이 2여서 이상하고 primary key도 이상하게 됐다. 일단 primary key는 unique해야하기 때문에 "),r("code",[t._v("{account_id, card_id}")]),t._v("를 묶어서 키로 설정하면 해결된다.\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(441),alt:"nf_6",height:"300"}})]),t._v(" "),r("p",[t._v("사실 class부터 empl_name까지는 non-prime attribute이다. 그런데 이 값들은 사실 account_id만으로도 충분히 fd하기 때문에 이때는 account_id, card_id에 partially dependent하다 라고 말할 수 있게된다. 이러한 체크는 모든 키에 대해서도 체크를 해봐야한다. 다른 키는 이전에 확인했었던 bank_name, account_num에 card_id가 합쳐진 값들이 키가 된다.\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(442),alt:"nf_7",height:"300"}})]),t._v(" "),r("p",[t._v("위 처럼 동일하게 partially dependent한 것을 확인할 수 있다. card_id 때문에 중복 데이터가 생기기 떄문이다.")]),t._v(" "),r("h3",{attrs:{id:"_2nf"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2nf"}},[t._v("#")]),t._v(" 2NF")]),t._v(" "),r("p",[t._v("2NF의 규칙은 "),r("code",[t._v("모든 non-prime attribute는 모든 key에 fully functionally dependent해야한다.")]),t._v("라는 규칙을 가지고 있어야한다. 그러니까 non-prime attribute가 부분적으로 key의 결과가 되면 안된다는 말이다. 그래서 card_id를 조금 손봐주면 된다.\n"),r("br"),t._v(" "),r("img",{attrs:{src:e(443),alt:"nf_8",height:"300"}})]),t._v(" "),r("p",[t._v("이렇게 말이다. 다른 테이블로 떼어냄으로 써 기존의 모든 키를 통해 non-prime attribute가 fully functionally dependent하게 되었다. 이렇게 "),r("code",[t._v("non-prime attribute를 fully functionally dependent하게 만드는 과정이 2NF")]),t._v("이다.")]),t._v(" "),r("h2",{attrs:{id:"마무리"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#마무리"}},[t._v("#")]),t._v(" 마무리")]),t._v(" "),r("p",[t._v("오늘 배운 정규화의 과정은 총 두가지인데 첫번째 정규화인 1NF는 한 속성에는 한가지의 값만 있어야한다는 것이다. 예를 들면 값이 "),r("code",[t._v("ruler, eraser, desk")]),t._v("처럼 말이다. 두번째인 2NF는 키가 아닌 속성들이 키와 관계를 맺을 때 모든 키를 통해서야 속성들이 unique해야한다는 말이다. 그러니까. 만약에 key가 2개가 있고 키가 아닌 속성이 4개가 있을 때 key하나로도 4가지의 속성을 결정할 수 있다면(unique하게 할 수 있다면) 안된다는 말이다. 이때 다른 키를 다른 테이블로 분리하여 해결하였다. 정답인지는 모르겠지만 1NF를 거쳐 어떤 값이 키가 될 수 밖에 없었으나 이 키가 다른 속성들을 결정하는데에 영향을 미치지 않는다면 그것은 해당 테이블과 어울리지 않는 키라고 생각이 된다. 그래서 분리가 가능하지 않았나 싶다.")])])}),[],!1,null,null,null);a.default=_.exports}}]);