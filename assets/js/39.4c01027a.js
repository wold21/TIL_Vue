(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{528:function(t,e,a){"use strict";a.r(e);var r=a(44),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"ajax-first"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ajax-first"}},[t._v("#")]),t._v(" Ajax_First")]),t._v(" "),a("h2",{attrs:{id:"동작-원리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#동작-원리"}},[t._v("#")]),t._v(" 동작 원리")]),t._v(" "),a("p",[t._v("앞서 Ajax는 페이지의 부분만 새로 갱신해올 수 있는 기법 중에 하나라고 말을 했었는데 이번 글에서는 좀 더 심층적으로 파헤쳐보려고 한다. 먼저 기존의 웹과 Ajax를 활용한 웹의 동작 원리를 살펴보자.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("기존 웹")]),t._v(" "),a("th",[t._v("Ajax 웹")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://i.loli.net/2021/10/17/CSe8aN3RBPYg4UK.png",alt:"other application"}})]),t._v(" "),a("td",[a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://i.loli.net/2021/10/17/2taWV9hXPyRiJgY.png",alt:"ajax application"}})])])])]),t._v(" "),a("p",[t._v("사실 기존 웹과의 차이점이라고 하면 이벤트가 발생 했을 시  JS를 시작으로 데이터의 요청이 시작되고 최종적으로 JS가 다시 이 데이터를 받아서 해당되는 부분만 교체가 된다고 생각하면 편할 것 같다.")]),t._v(" "),a("p",[t._v("큰 흐름은 그렇다 치고 중간에 보면 왼쪽은 HttpRequest처리를 하는데 Ajax는 XmlHttpRequest 처리 및 객체 생성을 한다. 어떻게 보면 Ajax를 이해하는데 가장 중요한 부분이기도 하기 때문에 더 살펴볼 필요가 있다.")]),t._v(" "),a("h2",{attrs:{id:"xmlhttprequest-객체"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#xmlhttprequest-객체"}},[t._v("#")]),t._v(" XmlHttpRequest 객체")]),t._v(" "),a("p",[t._v("Ajax에서  XmlHttpRequest 객체는 클라이언트가 서버와 데이터를 주고 받을 때 사용된다, 클라이언트 단이 백그라운드에서 계속해서 서버와 통신할 수 있는 것은 바로 이 객체를 사용하기 때문이다. XmlHttpRequest 이라는 이름을 가지고 있어 Xml만 주고 받을 수 있을 것 같지만 Intro에서 말했듯이 다양한 형식의 데이터 형식을 사용할 수도 있다. 게다가 http뿐만 아니라 file, ftp통신 방식도 지원한다고 한다. 일반적으로 HttpRequest와 다른 점이라고 하면 자바스크립트를 사용해서 http요청을 할 수 있느냐 아니냐의 차이라고 한다. 그렇기 때문에 XHR(XmlHttpRequest)이 서버와 비동기적 통신을 할 수 있는 것이다.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developer.mozilla.org/ko/docs/Web/API/XMLHttpRequest",target:"_blank",rel:"noopener noreferrer"}},[t._v("자세한 XMLHttpRequest를 알아보고 싶다면..."),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"어떻게-주고-받지"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#어떻게-주고-받지"}},[t._v("#")]),t._v(" 어떻게 주고 받지?")]),t._v(" "),a("p",[t._v("REST API에 대해서 공부를 시작만 했어도 볼 수 있는 것이 바로 CRUD를 실행 할 때 어떤 방식을 쓸지에 대한 것이다. 예를 들면 Get, Post, Put, Delete등이 바로 그것이다. (HttpRequest에서도 똑같이 쓰임) 간단하게 정리를 해보자면")]),t._v(" "),a("h4",{attrs:{id:"get"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get"}},[t._v("#")]),t._v(" Get")]),t._v(" "),a("p",[t._v("C"),a("strong",[t._v("R")]),t._v("UD - 보통 조회할 때 사용하며 흔히 쿼리문에서 Select를 말한다.")]),t._v(" "),a("blockquote",[a("p",[t._v("다만 Get방식은 주소에 데이터를 추가하여 전달하는 방식이기 때문에 중요한 정보나 쿼리가 주소에 그대로 드러나기 때문에 보안성을 따진다면 Get방식은 사용하지 않는 것이 좋다. 그래서 보통 조회할 때 사용하는 이유가 그것이다. 더불어 Get방식을 사용하면 그 요청을 브라우저에 캐싱할 수 있고 단점으로는 주소의 길이의 제한이 있다. 우리가 어느 홈페이지에 가서 어떤 글을 눌렀을 때 주소가 달라지는 것을 볼 수 있다. 이때 사용하는 것이 Get방식이다.")])]),t._v(" "),a("h4",{attrs:{id:"post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#post"}},[t._v("#")]),t._v(" Post")]),t._v(" "),a("p",[a("strong",[t._v("C")]),t._v("RUD - 새로운 데이터를 생성하거나 할 때 사용한다. 쿼리문에서는 Insert문이라고 생각하면 된다.")]),t._v(" "),a("blockquote",[a("p",[t._v("Post방식은 요청에 데이터를 별도로 첨부하여 전달하는 방식으로 브라우저에 캐시되지도 않고 히스토리에도 남지않아 보안성이 Get방식보다 높다.")])]),t._v(" "),a("h4",{attrs:{id:"put"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#put"}},[t._v("#")]),t._v(" Put")]),t._v(" "),a("p",[t._v("CR"),a("strong",[t._v("U")]),t._v("D - 수정을 할 때 사용하며 쿼리문에서 Update의 행동을 한다.")]),t._v(" "),a("h4",{attrs:{id:"delete"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delete"}},[t._v("#")]),t._v(" Delete")]),t._v(" "),a("p",[t._v("CRU"),a("strong",[t._v("D")]),t._v(" - 데이터를 삭제 할 때 사용한다. 쿼리문에서 Delete라고 생각하면 된다.")]),t._v(" "),a("h3",{attrs:{id:"멱등성-idempotence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#멱등성-idempotence"}},[t._v("#")]),t._v(" 멱등성 (Idempotence)")]),t._v(" "),a("p",[t._v("멱등성이란 여러번 수행해도 결과가 같음을 의미한다고 한다. 예를 들면 Get, Put, Delete는 같은 경로로 여러 번 호출해도 결과가 같다. 그러나 Post는 매 호출 때마다 새로운 데이터이기 때문에 멱등하지 않다.")]),t._v(" "),a("blockquote",[a("p",[t._v("멱등성이라는 말이 정말 생경한데 그냥 같은 행동을 여러 번 취해도 같은 결과를 보여주는 것이라고 생각하면 된다, 가령 수학에서 1 X 1 = 1 언제나 1이듯이 이러한 것을 멱등하다 또는 멱등성을 띄고 있다라고 말 할 수 있다.")])]),t._v(" "),a("h2",{attrs:{id:"마치며"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#마치며"}},[t._v("#")]),t._v(" 마치며")]),t._v(" "),a("p",[t._v("이번 글에서는 Ajax를 사용하기 위해서 최소한의 정보를 알아볼 수 있게 글을 작성했고 회사에 다니며 매우 빈번하게 사용하는 Ajax를 더 잘 사용하기 위해서 필요한 정보라고 생각했다. 다음 글은 실제로 데이터를 주고 받는 코드에 대해서 써보려고 한다.")]),t._v(" "),a("h4",{attrs:{id:"참고-사이트"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#참고-사이트"}},[t._v("#")]),t._v(" 참고 사이트")]),t._v(" "),a("p",[a("a",{attrs:{href:"http://tcpschool.com/ajax/ajax_intro_basic",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link-1"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://devuna.tistory.com/77",target:"_blank",rel:"noopener noreferrer"}},[t._v("Link-2"),a("OutboundLink")],1)])])}),[],!1,null,null,null);e.default=s.exports}}]);