(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{359:function(t,e,r){t.exports=r.p+"assets/img/b_1.e9576c74.png"},360:function(t,e,r){t.exports=r.p+"assets/img/b_2.7af5c5c1.png"},531:function(t,e,r){"use strict";r.r(e);var a=r(44),_=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"b-tree-1부"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree-1부"}},[t._v("#")]),t._v(" B-tree 1부")]),t._v(" "),a("h2",{attrs:{id:"개요"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#개요"}},[t._v("#")]),t._v(" 개요")]),t._v(" "),a("h3",{attrs:{id:"bst-이진-탐색-트리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bst-이진-탐색-트리"}},[t._v("#")]),t._v(" BST 이진 탐색 트리")]),t._v(" "),a("p",[t._v("모든 노드의 왼쪽 서브 트리는 해당 노드의 값보다 작은 값들만 가지고 모든 노드의 오른쪽 서브 트리를 해당 노드의 값보다 큰 값들만 가진다. 또 자식 노드는 최대 두 개까지 가질 수 있다.(이진)")]),t._v(" "),a("h2",{attrs:{id:"b-tree란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#b-tree란"}},[t._v("#")]),t._v(" B-tree란?")]),t._v(" "),a("p",[t._v("그런데 만약에 두 개가 아니라 자식 노드를 세 개로 셋팅하고 싶으면 어떻게 하면 될까?\n"),a("br"),t._v(" "),a("img",{attrs:{src:r(359),alt:"b_1",height:"250"}})]),t._v(" "),a("p",[t._v("바로 위 처럼 상위 노드에 2개의 값을 갖게 한다음 이진 트리와 비슷하게 왼쪽 자식 노드엔 k1보다 작은 값 가운데 자식 노드는 k1보다 크고 k2보다 작은 값 그리고 마지막 자식 노드엔 k2보다 작은 값을 넣어주게 되면 된다. 이를 "),a("code",[t._v("B-tree")]),t._v("라고 부르며 자식 노드의 최대 개수를 늘리기 위해서 만들어지게 되었으며 특징은 다음과 같다.")]),t._v(" "),a("ul",[a("li",[t._v("부모 노드에 key를 하나 이상 저장한다.")]),t._v(" "),a("li",[t._v("부모 노드의 key들을 오름차순으로 정렬한다.")]),t._v(" "),a("li",[t._v("정렬된 순서에 따라 자식 노드들의 key값의 범위가 결정된다.")]),t._v(" "),a("li",[t._v("최대 몇 개의 자식 노드를 가질 것인지가 중요한 파라미터로 동작한다.")])]),t._v(" "),a("p",[t._v("그리고 B-tree에서 사용하는 몇가지의 용어가 있다.")]),t._v(" "),a("ul",[a("li",[t._v("M > 각 노드의 최대 자식 노드 수 (M차 B-tree라고 부른다.)")]),t._v(" "),a("li",[t._v("M-1 > 각 노드의 최대 key 수")]),t._v(" "),a("li",[t._v("ceiling function M/2 > 각 노드의 최소 자식 노드 수\n"),a("ul",[a("li",[t._v("root node, leaf node는 제외")])])]),t._v(" "),a("li",[t._v("ceiling function M/2 -1 > 각 노드의 최소 key 수\n"),a("ul",[a("li",[t._v("root node는 제외")])])])]),t._v(" "),a("h2",{attrs:{id:"데이터-삽입"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#데이터-삽입"}},[t._v("#")]),t._v(" 데이터 삽입")]),t._v(" "),a("blockquote",[a("p",[t._v("추가는 항상 leaf노드에 한다."),a("br"),t._v("\n노드가 넘치면 가운데 key를 기준으로 좌우 key들을 분할하고 가운데 key는 승진한다.")])]),t._v(" "),a("h3",{attrs:{id:"_3차-b-tree"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3차-b-tree"}},[t._v("#")]),t._v(" 3차 B-tree")]),t._v(" "),a("br"),t._v(" "),a("img",{attrs:{src:r(360),alt:"b_2",height:"250"}}),t._v(" "),a("p",[t._v("방법은 위의 설명된 것과 동일하게 진행한다. 3차 B-tree이기때문에 각 노드의 최대 key수는 2가 된다. 먼저 1을 넣고 2를 넣고 7를 넣는다고 했을 때 노드의 key가 넘치기 때문에 7를 새로운 노드로 만들고 사이에 있던 2를 승진 시킨다. 그 다음에 5가 들어오면 5는 2보다 크기 때문에 오른쪽으로 가고 7의 옆으로 자리하게 되는데 (7, 5) 이때 정렬도 같이 실행되어 5, 7로 자리가 바뀌게 된다. 이런식으로 쭉쭉 트리를 늘려나가면 된다. 추가적인 특징은 다음과 같다. (그리고 추가는 leaf 조회는 root부터 시작한다는 것을 명심해야한다.)")]),t._v(" "),a("ul",[a("li",[t._v("모든 leaf노드들은 같은 레벨에 있다.")]),t._v(" "),a("li",[t._v("balanced tree")]),t._v(" "),a("li",[t._v("검색 avg/worst case O(log N)")])]),t._v(" "),a("h2",{attrs:{id:"마무리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#마무리"}},[t._v("#")]),t._v(" 마무리")]),t._v(" "),a("p",[t._v("내가 B-tree를 보고 섹시하다고 생각할 줄은 정말 몰랐다. 하나씩 값이 추가되면서 포인터가 바뀌고 승진하고 정렬하는 과정들이 아름답다고 생각했다. 이걸 구현하고 생각한 사람이 섹시한거겠지만 말이다. 기존에 배웠던 tree는 흥미가 없었는데 B-tree는 꽤나 흥미가 있다. 배운 내용과는 다른 내용이지만 요즘 이런 기술이나 사고방식들을 접하게되면 이제는 어떤 세상이 남았을까 하는 생각이 자주든다. AI가 AI를 가르치는 세상이 되었고 미래는 어떻게 변화할지 기대가 되면서도 불안해지는 건 어쩔 수 없다.")])])}),[],!1,null,null,null);e.default=_.exports}}]);