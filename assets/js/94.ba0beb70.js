(window.webpackJsonp=window.webpackJsonp||[]).push([[94],{567:function(t,a,s){"use strict";s.r(a);var r=s(17),v=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"msa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#msa"}},[t._v("#")]),t._v(" MSA")]),t._v(" "),a("h2",{attrs:{id:"msa란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#msa란"}},[t._v("#")]),t._v(" MSA란?")]),t._v(" "),a("p",[t._v("MSA는 MicroService Architecture의 줄임말이다. 쉽게 말해서 작은 애플리케이션들이 모여 하나의 구조를 이루고 있는 서비스라고 생각하면 편할 것 같은데 이게 왜 필요하고 생겨났는지에 대해 공부해 볼 예정이다.")]),t._v(" "),a("h2",{attrs:{id:"왜-생겨났을까"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#왜-생겨났을까"}},[t._v("#")]),t._v(" 왜 생겨났을까?")]),t._v(" "),a("p",[t._v("내가 MSA를 처음 들었던 시기는 2019년 코로나가 창궐하고 내가 첫 취업을 하게 되었을 떄였는데 이때는 IT쪽 서비스와 수요가 폭발적으로 급증한 시기였다. 그래서 이전보다 서버가 터지거나 어느 한 서비스나 기능이 동작하지 않아 사고가 나는 일이 많았을 것이다. 더불어 너무 다양한 서비스들이 나오는 시기라 이것들을 어떻게 정리해아할지 고민이 필요했을 것이다. 그래서 대부분의 큰 기업이나 서비스가 채택하게 된 방식이 MSA이다.")]),t._v(" "),a("h2",{attrs:{id:"조금-더-상세하게"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#조금-더-상세하게"}},[t._v("#")]),t._v(" 조금 더 상세하게")]),t._v(" "),a("p",[t._v("먼저 탐색을 하기 전에 스스로 생각해보자. MSA를 도입하면 어떤 일이 생기는 걸까. 먼저 내가 자주 사용하는 당근마켓을 떠올려보았다. 당근마켓은 원래 중고 거래만 할 수 있는 플랫폼이었다. 지금은 부동산, 알바, 동네 생활 공유 게다가 동네 지도 서비스까지 운영하고 있다. 만약 예전처럼 모놀리틱 아키텍쳐였다면 저중에 하나라도 고장이 나거나 멈춰버리면 모든 서비스가 마비되었을 것이다. 하나의 큰 애플리케이션 안에서 모든 것이 동작하고 있었을 것이기 때문이다. 애플리케이션 안에 이렇게 서비스가 많다면 MSA를 채택하는 것이 서비스 관리의 좋은 방향이 될 것이다. 그럼 이제 궁금증이 생기게 된다. DB는 어떻게 괸리하게 되는 것일까? 각 서비스가 정확히 분리가 가능하다면 모두 따로 사용해도 되지만 기본적으로 회원정보나 채팅 내역 같은 것은 모든 서비스에서 접근하고 있지 않나? 또는 각 서비스간 통신을 해야하는 순간들이 있지 않을까? 하는 생각이 들었다. 이 부분을 잘 정리하고 정립하는 것이 가장 중요할 것이라고 생각했다.")]),t._v(" "),a("h2",{attrs:{id:"좋고-나쁜점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#좋고-나쁜점"}},[t._v("#")]),t._v(" 좋고 나쁜점")]),t._v(" "),a("h3",{attrs:{id:"장점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#장점"}},[t._v("#")]),t._v(" 장점")]),t._v(" "),a("ul",[a("li",[t._v("먼저 서비스들은 서로 각기 다른 방식으로 통신할 수 있다. HTTP(REST)를 사용할 수도 있고 SOAP(메시징)을 사용할 수도 있다.")]),t._v(" "),a("li",[t._v("분류된 서비스는 다른 프로그래밍 언어, DB를 가질 수 있다.")]),t._v(" "),a("li",[t._v("각 서비스들은 서로가 원할 때 업데이트할 수 있다.")]),t._v(" "),a("li",[t._v("팀이나 부서는 하나의 서비스만 관리하면 되기에 운용의 부담이 덜 해진다.")])]),t._v(" "),a("h3",{attrs:{id:"단점"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#단점"}},[t._v("#")]),t._v(" 단점")]),t._v(" "),a("ul",[a("li",[t._v("모놀리틱 방식에 비해 네트워크 사용량이 높고 레이턴시 시간 또한 늘어나게 된다.")]),t._v(" "),a("li",[t._v("잘못된 설계인 경우 사용자의 경험을 저하시킬 수 있다.")]),t._v(" "),a("li",[t._v("공유 자원 접근이 어려워진다.")])])])}),[],!1,null,null,null);a.default=v.exports}}]);