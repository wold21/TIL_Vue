(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{522:function(t,a,s){"use strict";s.r(a);var r=s(17),n=Object(r.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"transaction-acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-acid"}},[t._v("#")]),t._v(" Transaction & ACID")]),t._v(" "),a("h2",{attrs:{id:"트랜잭션이란"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#트랜잭션이란"}},[t._v("#")]),t._v(" 트랜잭션이란?")]),t._v(" "),a("ul",[a("li",[t._v("단일한 논리적인 작업 단위를 말한다.")]),t._v(" "),a("li",[t._v("논리적인 이유로 여러 SQL문들을 단일 작업으로 묶어서 나눠질 수 없게 만든 것이 transaction이다.")]),t._v(" "),a("li",[t._v("transaction의 SQL문들 중에 일부만 성공해서 DB에 반영되는 일은 일어나지 않는다.")])]),t._v(" "),a("p",[t._v("예를 들면 A계좌에서 B계좌로 30만원을 이체 시킬일이 생겼을 때 그 순서는 다음과 같다.")]),t._v(" "),a("ol",[a("li",[t._v("A의 계좌 잔액을 조회 함. (SELECT)")]),t._v(" "),a("li",[t._v("문제가 없을 경우 A의 계좌 총액에서 30만원을 뺀 값으로 총액을 업데이트한다. (UPDATE)")]),t._v(" "),a("li",[t._v("B계좌의 총액을 총액 + 30만원을 한 값으로 업데이트 한다. (UPDATE)")])]),t._v(" "),a("p",[t._v("이와 같이 이체를 하는 행위를 하나의 작업 단위로 보고 이를 transaction이라고 부르는 것이다.")]),t._v(" "),a("h3",{attrs:{id:"mysql의-예제-간결하게"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql의-예제-간결하게"}},[t._v("#")]),t._v(" MySQL의 예제 (간결하게)")]),t._v(" "),a("h4",{attrs:{id:"commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[t._v("#")]),t._v(" COMMIT")]),t._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'A'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMIT")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("COMMIT?"),a("br"),t._v("\n지금까지 작업한 내용을 DB에 영구적으로 저장하는 명령어"),a("br"),t._v("\nTransaction 종료를 의미함")])]),t._v(" "),a("h4",{attrs:{id:"rollback"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rollback"}},[t._v("#")]),t._v(" ROLLBACK")]),t._v(" "),a("div",{staticClass:"language-SQL extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("START")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UPDATE")]),t._v(" account "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" balance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("300000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WHERE")]),t._v(" id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'B'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("blockquote",[a("p",[t._v("ROLLBACK?"),a("br"),t._v("\n지금까지 작업한 내용들을 모두 취소하고 transaction 이전 상태로 되돌린다"),a("br"),t._v("\nTransaction 종료한다")])]),t._v(" "),a("h4",{attrs:{id:"autocommit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#autocommit"}},[t._v("#")]),t._v(" AUTOCOMMIT")]),t._v(" "),a("ul",[a("li",[t._v("각각의 SQL문을 자동으로 transaction 처리 해주는 개념")]),t._v(" "),a("li",[t._v("SQL문이 성공적으로 실행하면 자동으로 commit한다")]),t._v(" "),a("li",[t._v("실행 중에 문제가 있었다면 알아서 rollback한다")])]),t._v(" "),a("h4",{attrs:{id:"mysql에서는"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql에서는"}},[t._v("#")]),t._v(" MySQL에서는....")]),t._v(" "),a("p",[t._v("쿼리를 "),a("code",[t._v("START TRANSACTION;")]),t._v("로 시작하게 되면 autocommit이 1인 상태여도 "),a("code",[t._v("off")]),t._v("로 설정되며 "),a("code",[t._v("COMMIT / ROLLBACK")]),t._v("과 함께 transaction이 종료되면 원래 autocommit 상태로 돌아간다")]),t._v(" "),a("h2",{attrs:{id:"acid"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acid"}},[t._v("#")]),t._v(" ACID")]),t._v(" "),a("p",[t._v("ACID는 간단하게 transaction이 어떤 개념을 지녀야하는지에 대한 내용이다."),a("br"),t._v(" "),a("br")]),t._v(" "),a("ul",[a("li",[a("p",[a("b",[t._v("Atomicity")])]),t._v(" "),a("ul",[a("li",[t._v("ALL or NOTHING")]),t._v(" "),a("li",[t._v("transaction의 쿼리는 모두 성공해야한다")]),t._v(" "),a("li",[t._v("중간에 어떤 쿼리가 실패하거나 커밋전에 DB에서 crash가 발생하거나 하는 경우에도 모든 상태가 ROLLBACK되어야 함")]),t._v(" "),a("li",[t._v("COMMIT 혹은 ROLLBACK을 담당하는 것은 DBMS의 영역")]),t._v(" "),a("li",[t._v("개발자는 언제 COMMIT 혹은 ROLLBACK을 할 것인지를 결정해야한다")])])]),t._v(" "),a("li",[a("p",[a("b",[t._v("Consistency")])]),t._v(" "),a("ul",[a("li",[t._v("데이터 베이스에 일관성을 유지시켜야한다")]),t._v(" "),a("li",[t._v("transaction은 DB 상태를 consistent 상태에서 또 다른 consistent 상태로 바꿔줘야 한다")]),t._v(" "),a("li",[t._v("consistents, trigger 등을 통해 DB에 정의된 rules을 transaction이 위반했다면 ROLLBACK해야 한다")]),t._v(" "),a("li",[t._v("transaction이 DB에 정의된 rule을 위반했는지는 DBMS가 commit 전에 확인하고 알려준다")]),t._v(" "),a("li",[t._v("그 외에 application 관점에서 transaction이 consistent하게 동작하는지는 개발자의 영역이다")])])]),t._v(" "),a("li",[a("p",[a("b",[t._v("Isolation")])]),t._v(" "),a("ul",[a("li",[t._v("여러 transaction들이 동시에 실행될 때도 혼자 실행되는 것처럼 동작하게 만든다")]),t._v(" "),a("li",[t._v("DBMS는 여러 종류의 isolation level을 제공한다")]),t._v(" "),a("li",[t._v("개발자는 isolation level 중에 어떤 level로 transaction을 동작시킬지 설정할 수 있다")]),t._v(" "),a("li",[t._v("concurrency control의 주된 목표가 isolation이다")])])]),t._v(" "),a("li",[a("p",[a("b",[t._v("Durability")])]),t._v(" "),a("ul",[a("li",[t._v("영존성")]),t._v(" "),a("li",[t._v("commit된 transaction은 DB에 영구적으로 저장한다")]),t._v(" "),a("li",[t._v("즉, DB system에 문제가 생겨도 commit된 transaction은 DB에 남아 있는다")]),t._v(" "),a("li",[a("code",[t._v("영구적으로 저장한다")]),t._v("라고 할 때는 일반적으로 "),a("code",[t._v("비휘발성(HDD, SSD) 메모리")]),t._v("에 저장함을 의미한다")]),t._v(" "),a("li",[t._v("기본적으로 transaction의 durability는 DBMS가 보장한다")])])])]),t._v(" "),a("h2",{attrs:{id:"마무리"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#마무리"}},[t._v("#")]),t._v(" 마무리")]),t._v(" "),a("p",[t._v("지금까지 개발할 때는 알아서 잘 해주겠거니 하면서 사용을 해왔었다. 물론 프레임 워크가 잘 되어있고 그래서 그런 것이겠지만 문득 이렇게 배우다보니 정말 중요한 시스템에는 "),a("code",[t._v("DB가 실행하는 transaction을 로깅해야 할수도 있겠다.")]),t._v("라는 생각이 들었다. 동시에 오늘 내용을 배우면서 프레임워크가 작업을 편리하게는 해주지만 너무 가려져버려서 나같이 얉은 지식을 가진 사람한테는 치명적인 부분으로 작용할 수 있는 부분일 거 같다. 개발을 배우면 배울수록 조심성만 나날이 늘어가는 것 같다.")])])}),[],!1,null,null,null);a.default=n.exports}}]);